AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A CloudFormation template to create an ECS canary blue-green deployment environment. 
  This template creates an ECS cluster, with a task and service registered to a "blue" loadbalancer. It creates a second "green" loadbalancer.
  It also registers a Route53 domain name for a service.  This service will point at the blue loadbalancer to start.
  Eventually, when a new service is created...
  <rewrite> This template illustrates how to use AWS CodeBuild and AWS CodePipeline to achieve continuous deployment of source code 
  from a GitHub repository via a Docker container to an Amazon EC2 Container Service cluster. 
  It registers an ALB, along with a task and service. It also creates a Route53 alias, which points to the ALB, using weighted DNS. 
  The 'blue' ALB receives 100% of the traffic. In another template, we will register a new 'green' ALB in preparation 
  for altering the DNS weights in order to send traffic to the new service.
  
Parameters:
  RecordSetName:
    Type: String
    Description: A record to use to direct traffic to the load balancer. For example 'myservice'.
  HostedZoneName:
    Type: String
    Description: Name of the hosted zone in Route53. For example 'example.com.'. This MUST end in a '.'
  TemplateBucket:
    Type: String
    Description: >
      S3 Bucket used for nested templates
      
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ECS canary blue green deployment, using DNS mechanism
        Parameters:
          - TemplateBucket
          - HostedZoneName
          - RecordSetName
    ParameterLabels:
      TemplateBucket:
        default: "An S3 bucket to hold your CloudFormation templates and lambda functions"
      HostedZoneName:
        default: "What is the hosted zone DNS name?"
      RecordSetName:
        default: "What is the service name?"
        
Resources:
  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateBucket}/templates/ecs-cluster.yaml
      Parameters:
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId

  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateBucket}/templates/load-balancer.yaml
      Parameters:
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateBucket}/templates/vpc.yaml
      Parameters:
        Name: !Ref AWS::StackName
        VpcCIDR: 192.168.0.0/16
        Subnet1CIDR: 192.168.10.0/24
        Subnet2CIDR: 192.168.20.0/24

  Service:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateBucket}/templates/service.yaml
      Parameters:
        DesiredCount: 1
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup

  Route53:
    Type: AWS::CloudFormation::Stack
    DependsOn: LoadBalancer
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${TemplateBucket}/templates/route53.yaml
      Parameters:
        ZoneName: !Ref HostedZoneName
        RecordName: !Ref RecordSetName
        DNSName: !GetAtt LoadBalancer.Outputs.DNSName
        CanonicalZone: !GetAtt LoadBalancer.Outputs.CanonicalZone
    
Outputs:
  ServiceUrl:
    Description: The sample service that is being continuously deployed.
    Value: !GetAtt LoadBalancer.Outputs.ServiceUrl